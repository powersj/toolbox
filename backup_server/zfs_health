#!/bin/bash -ux
# Adaption of the ZFS health check script created by calmoel.org. This is
# modified for Ubuntu and very different email format.
# Joshua Powers <mrpowersj@gmail.com>

EMAIL_ADDRESS="mrpowersj@gmail.com"

if [ "$(id -u)" != "0" ]; then
  echo "This script must be run as root" 1>&2
  exit 1
fi

FAULTS=()
FAULT_COUNT=0

# Health Check
# ---
# Check if all zfs volumes are in good condition. We are looking for any
# keyword signifying a degraded or broken array.

condition=$(/sbin/zpool status | egrep -i '(DEGRADED|FAULTED|OFFLINE|UNAVAIL|REMOVED|FAIL|DESTROYED|corrupt|cannot|unrecover)')

if [ "${condition}" ]; then
  FAULTS+=("Health Error")
  FAULT_COUNT=$((FAULT_COUNT + 1))
fi


# Capacity Check
# --- 
# Make sure pool capacities are below a certain % for best performance. The
# percentage really depends on how large your volume is. If you have a 128GB
# SSD then 80% is reasonable. If you have a 60TB raid-z2 array then you can
# probably set the warning closer to 95%. 
#
# ZFS uses a copy-on-write scheme. The file system writes new data to
# sequential free blocks first and when the uberblock has been updated the new
# inode pointers become valid. This method is true only when the pool has
# enough free sequential blocks. If the pool is at capacity and space limited,
# ZFS will be have to randomly write blocks. This means ZFS can not create an
# optimal set of sequential writes and write performance is severely impacted.

max_capacity=75

capacity=$(/sbin/zpool list -H -o capacity)
for line in ${capacity//%/}
do
  if [ "$line" -ge "$max_capacity" ]; then
    FAULTS+=("Capacity Exceeded")
    FAULT_COUNT=$((FAULT_COUNT + 1))
  fi
done


# Drive Errors
# ---
# Check the columns for READ, WRITE and CKSUM (checksum) drive errors on all
# volumes and all drives using "zpool status". If any non-zero errors are
# reported an email will be sent out. You should then look to replace the
# faulty drive and run "zpool scrub" on the affected volume after resilvering.

errors=$(/sbin/zpool status | grep ONLINE | grep -v state | awk '{print $3 $4 $5}' | grep -v 000)
if [ "${errors}" ]; then
  FAULTS+=("Drive Error(s)")
  FAULT_COUNT=$((FAULT_COUNT + 1))
fi


# Scrub Expired
# ---
# Check if all volumes have been scrubbed within a certain number of days. The
# general guide is to scrub volumes on desktop quality drives once a week and
# volumes on enterprise class drives once a month. You can always use cron to
# schedule "zpool scrub" in off hours. We scrub our volumes every Sunday
# morning for example.
#
# Scrubbing traverses all the data in the pool once and verifies all blocks can
# be read. Scrubbing proceeds as fast as the devices allows, though the
# priority of any I/O remains below that of normal calls. This operation might
# negatively impact performance, but the file system will remain usable and
# responsive while scrubbing occurs. To initiate an explicit scrub, use the
# "zpool scrub" command.
#
# The scrub_expire variable is in seconds. For 8 days then:
# 8 days * 24 hours * 3600 seconds = 691200 seconds. 

scrubExpire=691200

currentDate=$(date +%s)
zfsVolumes=$(/sbin/zpool list -H -o name)

for volume in ${zfsVolumes}
do
  if [ "$(/sbin/zpool status "$volume" | egrep -c "none requested")" -ge 1 ]; then
    echo "ERROR: You need to run \"zpool scrub $volume\" before this script can monitor the scrub expiration time."
    break
  fi
  if [ "$(/sbin/zpool status "$volume" | egrep -c "scrub in progress|resilver")" -ge 1 ]; then
    break
  fi

  scrubRawDate=$(/sbin/zpool status "$volume" | grep scrub | awk '{print $11" "$12" " $13" " $14" "$15}')
  scrubDate=$(date -d "$scrubRawDate" +%s)

  if [ $((currentDate-scrubDate)) -ge $scrubExpire ]; then
    FAULTS+=("Scrub Needed On '$volume'")
    FAULT_COUNT=$((FAULT_COUNT + 1))
  fi
done


# Notifications
# --- 
# On any problems send email with drive status information and capacities
# including a helpful subject line to root. Also use logger to write the email
# subject to the local logs.

EMAIL_SUBJECT="$(hostname): ZFS Health Check"
EMAIL_MESSAGE=""

if [ $FAULT_COUNT -gt 0 ]; then
  EMAIL_SUBJECT="$EMAIL_SUBJECT - FAIL"
  EMAIL_MESSAGE="Issue(s) Detected:\n"

  for fault in "${FAULTS[@]}"
  do
    EMAIL_MESSAGE="$EMAIL_MESSAGE  * $fault\n"
  done
else
  EMAIL_SUBJECT="$EMAIL_SUBJECT - PASS"
fi

EMAIL_MESSAGE="$EMAIL_MESSAGE\n\n$(/sbin/spool list)\n\n\n$(/sbin/zpool status)\n"

echo -e "$EMAIL_MESSAGE" | mail -s "$EMAIL_SUBJECT" "$EMAIL_ADDRESS"
logger "$EMAIL_SUBJECT"

